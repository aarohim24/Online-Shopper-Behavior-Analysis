import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from transformers import pipeline
import plotly.express as px
import plotly.graph_objects as go

np.random.seed(42)
n_sessions = 1000

data = {
    'session_id': range(1, n_sessions + 1),
    'time_spent': np.random.normal(300, 100, n_sessions).clip(30, 1200),  # seconds
    'pages_visited': np.random.randint(1, 20, n_sessions),
    'cart_items': np.random.randint(0, 10, n_sessions),
    'add_to_cart': np.random.randint(0, 5, n_sessions),
    'checkout_initiated': np.random.binomial(1, 0.3, n_sessions),
    'purchase_made': np.random.binomial(1, 0.2, n_sessions),
    'review_text': [f"Review {i}: {'Good' if np.random.rand() > 0.5 else 'Bad'} experience" for i in range(n_sessions)]
}

df = pd.DataFrame(data)

df['avg_time_per_page'] = df['time_spent'] / df['pages_visited']
df['cart_value'] = df['cart_items'] * df['add_to_cart']

sentiment_analyzer = pipeline('sentiment-analysis')
df['review_sentiment'] = df['review_text'].apply(
    lambda x: sentiment_analyzer(x)[0]['score'] if sentiment_analyzer(x)[0]['label'] == 'POSITIVE' else -sentiment_analyzer(x)[0]['score']
)

features = ['time_spent', 'pages_visited', 'cart_items', 'add_to_cart', 
            'checkout_initiated', 'avg_time_per_page', 'cart_value', 'review_sentiment']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(df[features])

kmeans = KMeans(n_clusters=4, random_state=42)
df['shopper_segment'] = kmeans.fit_predict(X_scaled)

fig = px.scatter_3d(
    df, 
    x='time_spent', 
    y='pages_visited', 
    z='cart_value', 
    color='shopper_segment',
    title='Shopper Segments'
)
fig.show()

X = X_scaled
y = df['purchase_made']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

y_pred = rf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.2f}")

feature_importance = pd.DataFrame({
    'feature': features,
    'importance': rf.feature_importances_
}).sort_values('importance', ascending=False)

fig = go.Figure(data=[
    go.Bar(x=feature_importance['feature'], y=feature_importance['importance'])
])
fig.update_layout(title='Feature Importance', xaxis_title='Features', yaxis_title='Importance')
fig.show()

df.to_csv('shopper_analysis_results.csv', index=False)
